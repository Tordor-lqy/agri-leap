name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  desktop-test:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
        
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false
        
    - name: Verify pnpm installation
      run: pnpm --version
      
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Lint
      run: pnpm lint
      
    - name: Build frontend
      run: pnpm build
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        
    - name: Install Rust Android target
      run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
        
    - name: Build Tauri app (debug)
      run: cd src-tauri && cargo build

  android-test:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false
        
    - name: Verify pnpm installation
      run: pnpm --version
      
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Lint
      run: pnpm lint
      
    - name: Build frontend
      run: pnpm build
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        
    - name: Install Rust Android target
      run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup NDK
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$(ls -1 $ANDROID_SDK_ROOT/ndk | head -n 1)" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$NDK_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$NDK_HOME" >> $GITHUB_ENV
        # List NDK directory contents for debugging
        echo "NDK directory contents:"
        ls -la $ANDROID_SDK_ROOT/ndk/
        echo "Selected NDK version: $(ls -1 $ANDROID_SDK_ROOT/ndk | head -n 1)"
        echo "Full NDK path: $NDK_HOME"
        # Check if toolchains directory exists
        if [ -d "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" ]; then
          echo "NDK toolchain found at: $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          ls -la $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/
        else
          echo "NDK toolchain not found, checking available directories:"
          ls -la $NDK_HOME/toolchains/llvm/prebuilt/
          # Try to find the correct prebuilt directory
          for dir in $NDK_HOME/toolchains/llvm/prebuilt/*; do
            if [ -d "$dir/bin" ]; then
              echo "Found alternative toolchain at: $dir/bin"
              ls -la $dir/bin/ | grep clang
            fi
          done
        fi
      
    - name: Configure Rust for Android cross-compilation
      run: |
        mkdir -p ~/.cargo
        # Find the correct NDK toolchain path
        NDK_TOOLCHAIN_PATH=""
        for path in "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" "$ANDROID_SDK_ROOT/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin"; do
          if [ -d "$path" ]; then
            NDK_TOOLCHAIN_PATH="$path"
            break
          fi
        done
        
        # If standard path not found, try to find any prebuilt directory with bin
        if [ -z "$NDK_TOOLCHAIN_PATH" ]; then
          echo "Standard paths not found, searching for alternative toolchain paths..."
          for dir in $NDK_HOME/toolchains/llvm/prebuilt/*; do
            if [ -d "$dir/bin" ] && [ -f "$dir/bin/aarch64-linux-android-clang" ]; then
              NDK_TOOLCHAIN_PATH="$dir/bin"
              echo "Found alternative toolchain at: $NDK_TOOLCHAIN_PATH"
              break
            fi
          done
        fi
        
        if [ -z "$NDK_TOOLCHAIN_PATH" ]; then
          echo "Error: Could not find NDK toolchain path"
          echo "NDK_HOME: $NDK_HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "Contents of NDK toolchains directory:"
          ls -la $NDK_HOME/toolchains/llvm/prebuilt/
          exit 1
        fi
        
        echo "Using NDK toolchain path: $NDK_TOOLCHAIN_PATH"
        echo "Contents of toolchain bin directory:"
        ls -la $NDK_TOOLCHAIN_PATH/ | grep -E "(clang|ar)"
        
        echo "[target.aarch64-linux-android]" >> ~/.cargo/config
        echo "ar = \"$NDK_TOOLCHAIN_PATH/aarch64-linux-android-ar\"" >> ~/.cargo/config
        echo "linker = \"$NDK_TOOLCHAIN_PATH/aarch64-linux-android-clang\"" >> ~/.cargo/config
        
        # Also set environment variables that might be used by the build
        echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$NDK_TOOLCHAIN_PATH/aarch64-linux-android-clang" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_AR=$NDK_TOOLCHAIN_PATH/aarch64-linux-android-ar" >> $GITHUB_ENV
        echo "CC_aarch64-linux-android=$NDK_TOOLCHAIN_PATH/aarch64-linux-android-clang" >> $GITHUB_ENV
        echo "CXX_aarch64-linux-android=$NDK_TOOLCHAIN_PATH/aarch64-linux-android-clang++" >> $GITHUB_ENV
      
    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0"
      
    - name: Check Tauri Android project setup
      run: cd src-tauri && cargo tauri android init